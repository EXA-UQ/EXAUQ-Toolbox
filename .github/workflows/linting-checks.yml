# # These are PR checks that with protected branch rules will not allow
# # for pushes or merging of PRs without checks passing. Theoretically, if one
# # uses the pre-commit hooks - they shouldn't fail. 

# name: Linting Checks
# run-name: "Linting checks upon ${{ github.event_name }} from ${{ github.ref_name }}"
# on:
#   pull_request_review:
#     types: [submitted]
#   repository_dispatch:
#   workflow_dispatch:
#   workflow_call:

# jobs:

#   black:
#     name: black Formatting Check
#     runs-on: ubuntu-latest
#     if: ${{ github.event.review.state == 'approved' && 
#       (github.event.pull_request.base.ref == 'main' || 
#       github.event.pull_request.base.ref == 'dev' || 
#       startsWith(github.event.pull_request.base.ref, 'releases/')) 
#       }}
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: Set up Python
#         uses: actions/setup-python@v4
#         with:
#           python-version: '3.10'

#       - name: Install pre-commit
#         run: pip install pre-commit

#       - name: Install pre-commit hooks
#         run: pre-commit install-hooks

#       - name: Black pre-commit
#         run: pre-commit run black --all-files

#   isort:
#     name: isort Import Check
#     runs-on: ubuntu-latest
#     if: ${{ github.event.review.state == 'approved' && 
#       (github.event.pull_request.base.ref == 'main' || 
#       github.event.pull_request.base.ref == 'dev' || 
#       startsWith(github.event.pull_request.base.ref, 'releases/')) 
#         }}
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: Set up Python
#         uses: actions/setup-python@v4
#         with:
#           python-version: '3.10'

#       - name: Install pre-commit
#         run: pip install pre-commit

#       - name: Install pre-commit hooks
#         run: pre-commit install-hooks
        
#       - name: isort pre-commit
#         run: pre-commit run isort --all-files


name: Documentation Upload
on:
  push:
    branches:
      - main
  repository_dispatch:
  workflow_dispatch:
  workflow_call:
    
permissions:
  contents: write
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Check out the code
      - uses: actions/checkout@v4

      # Step 2: Configure Git credentials
      - name: Configure Git Credentials
        run: |
          git config user.name github-actions[bot]
          git config user.email 41898282+github-actions[bot]@users.noreply.github.com

      # Step 3: Set up Python
      - uses: actions/setup-python@v5
        with:
          python-version: 3.10

      # Step 4: Cache Poetry dependencies
      - name: Cache Poetry dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      # Step 5: Install Poetry
      - name: Install Poetry
        run: pipx install poetry

      # Step 6: Install dependencies with Poetry
      - name: Install dependencies
        run: poetry install --with=dev

      # Step 7: Build Jupyter notebooks
      - name: Build Jupyter notebooks
        run: |
          set -e
          set -x
          poetry run python scripts/build_notebooks.py

      # Step 8: Build MkDocs site
      - name: Build MkDocs
        run: |
          set -e
          set -x
          poetry run mkdocs build

    #   # Step 9: Deploy to GitHub Pages
    #   - name: Deploy to GitHub Pages
    #     run: |
    #       set -e
    #       set -x
    #       poetry run mkdocs gh-deploy --force
