from typing import Optional

from scipy.stats.qmc import LatinHypercube

from exauq.core.modelling import Input, SimulatorDomain

def oneshot(
    domain: SimulatorDomain, design_num: int, seed: Optional[int] = None   
) -> tuple[Input]:
    """
    Create a "one-shot" design for a simulator using the Latin hypercube method.

    The Latin hypercube sample generates points in the unit square to spacialy fill the 
    domain as best as possible. It is then rescaled to match the design of the simulator. 
    The algorithm is implemented from the Scipy package using the provided domain and 
    number of design points chosen (see notes for further details). 

    Parameters
    ----------
    domain : SimulatorDomain
        The domain of a simulator, defining the bounded input space over which the Latin
        hypercube will be generated.
    
    design_num : int
        The number of design points to create within the domain.

    seed : int, optional
        (Default: None) A number to seed the random number generator used in the
        underlying optimisation. If ``None`` then no seeding will be used.

    Returns
    -------
    tuple[Input]
        The inputs for the domain generated by the Latin hypercube and scaled to match
        the design of the simulator, returned as a tuple of inputs. 
    
    Notes
    -----
    The Scipy documentation for the Latin hypercube:
    https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.qmc.LatinHypercube.html

    """
    
    if not isinstance(domain, SimulatorDomain):
        raise TypeError(
            f'Expected domain to be of type SimulatorDomain, but received {type(domain)}'
        )
    
    if not isinstance(design_num, int):
        raise TypeError(
            f'Expected design_num to be of type int, but received {type(design_num)}'
        )

    if seed is not None and not isinstance(seed, int):
        raise TypeError(
            f'Expected seed to be None or of type int, but received {type(seed)}'
        )
    
    # Use the dimension of the domain in defining the Latin hypercube sampler.
    # Seed used to make the sampling repeatable.
    sampler = LatinHypercube(domain.dim, seed=seed)
    lhs_array = sampler.random(n=design_num)

    # Rescaled into domain
    lhs_inputs = tuple([domain.scale(row) for row in lhs_array])

    return lhs_inputs

